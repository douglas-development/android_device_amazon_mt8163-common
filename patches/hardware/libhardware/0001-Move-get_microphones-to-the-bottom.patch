diff --git a/include/hardware/audio.h b/include/hardware/audio.h
index feebd23..23efcc5 100644
--- a/include/hardware/audio.h
+++ b/include/hardware/audio.h
@@ -531,25 +531,7 @@ struct audio_stream_in {
     int (*get_mmap_position)(const struct audio_stream_in *stream,
                              struct audio_mmap_position *position);
 
-    /**
-     * Called by the framework to read active microphones
-     *
-     * \param[in] stream the stream object.
-     * \param[out] mic_array Pointer to first element on array with microphone info
-     * \param[out] mic_count When called, this holds the value of the max number of elements
-     *                       allowed in the mic_array. The actual number of elements written
-     *                       is returned here.
-     *                       if mic_count is passed as zero, mic_array will not be populated,
-     *                       and mic_count will return the actual number of active microphones.
-     *
-     * \return 0 if the microphone array is successfully filled.
-     *         -ENOSYS if there is an error filling the data
-     */
-    int (*get_active_microphones)(const struct audio_stream_in *stream,
-                                  struct audio_microphone_characteristic_t *mic_array,
-                                  size_t *mic_count);
-
-    /**
+     /**
      * Called by the framework to instruct the HAL to optimize the capture stream in the
      * specified direction.
      *
@@ -585,6 +567,25 @@ struct audio_stream_in {
      */
     void (*update_sink_metadata)(struct audio_stream_in *stream,
                                  const struct sink_metadata* sink_metadata);
+
+    /**
+     * Called by the framework to read active microphones
+     *
+     * \param[in] stream the stream object.
+     * \param[out] mic_array Pointer to first element on array with microphone >
+     * \param[out] mic_count When called, this holds the value of the max numbe>
+     *                       allowed in the mic_array. The actual number of ele>
+     *                       is returned here.
+     *                       if mic_count is passed as zero, mic_array will not>
+     *                       and mic_count will return the actual number of act>
+     *
+     * \return 0 if the microphone array is successfully filled.
+     *         -ENOSYS if there is an error filling the data
+     */
+    int (*get_active_microphones)(const struct audio_stream_in *stream,
+                                  struct audio_microphone_characteristic_t *mic,
+                                  size_t *mic_count);
+
 };
 typedef struct audio_stream_in audio_stream_in_t;

