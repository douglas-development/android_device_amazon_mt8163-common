diff --git a/liblog/logger_write.c b/liblog/logger_write.c
index 84feb20..7da8df4 100644
--- a/liblog/logger_write.c
+++ b/liblog/logger_write.c
@@ -34,6 +34,10 @@
 #include "log_portability.h"
 #include "logger.h"
 
+#ifndef FAKE_LOG_DEVICE
+#include <sys/system_properties.h>
+#endif
+
 #define LOG_BUF_SIZE 1024
 
 static int __write_to_log_init(log_id_t, struct iovec* vec, size_t nr);
@@ -701,3 +705,68 @@ LIBLOG_ABI_PUBLIC int android_get_log_transport() {
 
   return ret;
 }
+#ifndef __unused
+#define __unused  __attribute__((__unused__))
+#endif
+struct xlog_record {
+    const char *tag_str;
+    const char *fmt_str;
+    int prio;
+};
+
+LIBLOG_ABI_PUBLIC void __attribute__((weak)) __xlog_buf_printf(int bufid __unused, const struct xlog_record *xlog_record __unused, ...) {
+#ifndef FAKE_LOG_DEVICE
+    char prop[32]="0";
+    /* check property for diable all xlog */
+    __system_property_get("ro.disable.xlog",prop);
+    if (!strcmp(prop, "0"))
+#endif
+    {
+	va_list args;
+	va_start(args, xlog_record);
+	__android_log_vprint(xlog_record->prio, xlog_record->tag_str, xlog_record->fmt_str, args);
+    }
+}
+
+LIBLOG_ABI_PUBLIC int __attribute__((weak)) lab126_log_write(int bufID, int prio, const char *tag, const char *fmt, ...) {
+	va_list ap;
+	char buf[LOG_BUF_SIZE];
+	int _a = bufID;
+	int _b = prio;
+
+	// skip flooding logs
+	if (!tag)
+	{
+		tag = "";
+	}
+	if( strncmp(tag, "Sensors", 7) == 0
+		||  strncmp(tag, "qcom_se", 7) == 0 
+			||   strncmp(tag, "rpmb", 7) == 0
+	   			|| strncmp(tag, "AudioALSAStreamOut", 7) == 0)
+	{
+		return 0;
+	}
+	// skip flooding logs
+
+	va_start(ap, fmt);
+	vsnprintf(buf, LOG_BUF_SIZE, fmt, ap);
+	va_end(ap);
+
+	char new_tag[128];
+	snprintf(new_tag, sizeof(new_tag), "AMZ-%s", tag);
+
+	return __android_log_buf_write(LOG_ID_MAIN, ANDROID_LOG_DEBUG, new_tag, buf);
+}
+
+LIBLOG_ABI_PUBLIC int __attribute__((weak)) __vitals_log_print(int bufID, int prio, const char *tag, const char *fmt, ...) {
+	va_list ap;
+	char buf[LOG_BUF_SIZE];
+	int _a = bufID;
+	int _b = prio;
+
+	va_start(ap, fmt);
+	va_end(ap);
+
+	return __android_log_write(ANDROID_LOG_DEBUG, tag, "__vitals_log_print not implemented");
+}
+
